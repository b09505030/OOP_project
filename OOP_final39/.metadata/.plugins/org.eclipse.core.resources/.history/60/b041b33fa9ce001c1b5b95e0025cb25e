package com.mime.minefront.graphics;

import java.util.Random;

import com.mime.minefront.Game;
import com.mime.minefront.input.Controller;

public class Render3D extends Render {

	public double[] zBuffer;
	public double renderDistance = 5000;
	// Random random = new Random();
	private double forwardGlobal;
	private double forward, right, up, cosine, sine;

	public Render3D(int width, int height) {
		super(width, height);
		zBuffer = new double[width * height];
	}

	public void floor(Game game) {

		double floorPosition = 8;
		double ceilingPosition = 8; // set 800 can get rid of ceiling

		forward = game.controls.z;// .time % 100 / 20.0; // test for wall //game.controls.z; // 前進
		forwardGlobal = forward;
		right = game.controls.x; // 右走
		up = game.controls.y;// Math.sin(game.time / 10.0) * 2
		double walking = Math.sin(game.time / 6.0) * 0.5;
		if (Controller.crouchWalk) { // 蹲下時不要晃那麼大
			walking = Math.sin(game.time / 6.0) * 0.25;
		}
		if (Controller.runWalk) {
			walking = Math.sin(game.time / 6.0) * 0.8;
		}
		double rotation = game.controls.rotation;// 0; // test for wall //game.controls.rotation; // 0; //game.time /
													// 100.0; // animate
		// the rotation
		cosine = Math.cos(rotation);
		sine = Math.sin(rotation);

		for (int y = 0; y < height; y++) {
			double ceiling = (y - height / 2.0) / height;

			double z = (floorPosition + up) / ceiling;

//			if (ceiling < 0) { // the same way movement
//				ceiling = -ceiling;
//			}

			if (Controller.walk) {
				z = (floorPosition + up + walking) / ceiling;

			}

			if (ceiling < 0) { // split up and down
				z = (ceilingPosition - up) / -ceiling;
				if (Controller.walk) {
					z = (floorPosition - up - walking) / -ceiling;
				}
			}

			for (int x = 0; x < width; x++) {
				double depth = (x - width / 2.0) / height;
				depth *= z;
				double xx = depth * cosine + z * sine; // rotation
				double yy = z * cosine - depth * sine;
				int xPix = (int) (xx + right);
				int yPix = (int) (yy + forward);
				zBuffer[x + y * width] = z;

				pixels[x + y * width] = Texture.floor.pixels[(xPix & 7) + (yPix & 7) * 8];

				// pixels[x + y * width] = ((xPix & 15) * 16) | ((yPix & 15) * 16) << 8; // OR?,
				// shift? ,// bitwise
				// operator AND

				if (z > 500) { // remove the infinite margin to increase the FPS
					pixels[x + y * width] = 0;
				} // public void renderDistanceLimiter() may replace it?
					// System.out.println(xx);
			}
		}

	}

	public void walls() { // 牆壁，不會在邊界消失。
		// 18
//		Random random = new Random(100); // 方形區域才不會一直閃動
//
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 0; // 每+1往右移一格
//			double yy = random.nextDouble() - 0;
//			double zz = 1.5 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 1; // 每+1往右移一格
//			double yy = random.nextDouble() - 0;
//			double zz = 1.5 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 0; // 每+1往右移一格
//			double yy = random.nextDouble() - 1;
//			double zz = 1.5 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 1; // 每+1往右移一格
//			double yy = random.nextDouble() - 1;
//			double zz = 1.5 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 0; // 每+1往右移一格
//			double yy = random.nextDouble() - 0;
//			double zz = 2 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 1; // 每+1往右移一格
//			double yy = random.nextDouble() - 0;
//			double zz = 2 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 0; // 每+1往右移一格
//			double yy = random.nextDouble() - 1;
//			double zz = 2 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}
//		for (int i = 0; i < 10000; i++) {
//			double xx = random.nextDouble() - 1; // 每+1往右移一格
//			double yy = random.nextDouble() - 1;
//			double zz = 2 - forwardGlobal / 16; // 深度每0.5會移動一格
//
//			int xPixel = (int) (xx / zz * height / 2 + width / 2);
//			int yPixel = (int) (yy / zz * height / 2 + height / 2);
//			if (xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height) {
//				pixels[xPixel + yPixel * width] = 0xfffff;
//			}
//		}

	}

	public void renderWall(double xLeft, double xRight, double zDistance, double yHeight) { // 19
		double xcLeft = ((xLeft) - right) * 2;
		double zcLeft = ((zDistance) - forward) * 2;

		double rotLeftSideX = xcLeft * cosine - zcLeft * sine;
		double yCornerTL = ((-yHeight) - up) * 2;
		double yCornerBL = ((+0.5 - yHeight) - up) * 2;
		double rotLeftSideZ = zcLeft * cosine - xcLeft * sine;

		double xcRight = ((xRight) - right) * 2;
		double zcRight = ((zDistance) - forward) * 2;

		double rotRightSideX = xcRight * cosine - zcRight * sine;
		double yCornerTR = ((-yHeight) - up) * 2;
		double yCornerBR = ((+0.5 - yHeight) - up) * 2;
		double rotRightSideZ = zcRight * cosine - xcRight * sine;

		double xPixelLeft = (rotLeftSideX / rotLeftSideZ * height + width / 2);
		double xPixelRight = (rotRightSideX / rotRightSideZ * height + width / 2);

		if (xPixelLeft >= xPixelRight) {
			return;
		}

		int xPixelLeftInt = (int) (xPixelLeft);
		int xPixelRightInt = (int) (xPixelRight);

		if (xPixelLeftInt < 0) {
			xPixelLeftInt = 0;
		}
		if (xPixelRightInt > width) {
			xPixelRightInt = width;
		}

		double yPixelLeftTop = (int) (yCornerTL / rotLeftSideZ * height + height / 2);
		double yPixelLeftBottom = (int) (yCornerBL / rotLeftSideZ * height + height / 2);
		double yPixelRightTop = (int) (yCornerTR / rotRightSideZ * height + height / 2);
		double yPixelRightBottom = (int) (yCornerBR / rotRightSideZ * height + height / 2);

		for (int x = xPixelLeftInt; x < xPixelRightInt; x++) {
			double pixelRotation = (x - xPixelLeft) / (xPixelRight - xPixelLeft);

			double yPixelTop = yPixelLeftTop + (yPixelRightTop - yPixelRightTop) * pixelRotation;
			double yPixelBottom = yPixelLeftBottom + (yPixelRightBottom - yPixelRightBottom) * pixelRotation;

			int yPixelTopInt = (int) (yPixelTop);
			int yPixelBottomInt = (int) (yPixelBottom);

			if (yPixelTopInt < 0) {
				yPixelTopInt = 0;
			}
			if (yPixelTopInt > height) {
				yPixelTopInt = height;
			}

			for (int y = yPixelTopInt; y < yPixelBottomInt; y++) {
				pixels[x + y * width] = 0x1B91E0;
				zBuffer[x + y * width] = 0;
			}
		}
	}

	public void renderDistanceLimiter() {
		for (int i = 0; i < width * height; i++) {
			int colour = pixels[i];
			int brightness = (int) (renderDistance / (zBuffer[i])); // enable to fade off

			if (brightness < 0) {
				brightness = 0;
			}

			if (brightness > 255) {
				brightness = 255;
			}

			int r = (colour >> 16) & 0xff;
			int g = (colour >> 8) & 0xff;
			int b = (colour) & 0xff;

			r = r * brightness / 255;
			g = g * brightness / 255;
			b = b * brightness / 255;

			pixels[i] = r << 16 | g << 8 | b;
		}
	}
}
//ep11 last