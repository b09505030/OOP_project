package level;

import entity.Entity;
import graphics.Sprite;
import graphics.Texture;
import input.Player;
import main.Game;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Level {

	public Block[] blocks;
	public int width, height;
	private Block solidWall = new SolidBlock();
	final Random random = new Random();
	
	
	protected int wallCol = 0xB3CEE2;
	protected int wallTex = 0;

	private List<Entity> entities = new ArrayList<Entity>();
	
	protected Game game;
	public Player player;
	
	
	public void init(Game game, String name, int w, int h, int[] pixels) {
		this.game = game;

		player = game.player;

		solidWall.col = Texture.getCol(wallCol);
		solidWall.tex = Texture.getCol(wallTex);
//		this.width = w;
//		this.height = h;
//		blocks = new Block[width * height];
//
//		for (int y = 0; y < h; y++) {
//			for (int x = 0; x < w; x++) {
//				int col = pixels[x + y * w] & 0xffffff;
//				int id = 255 - ((pixels[x + y * w] >> 24) & 0xff);
//
//				Block block = getBlock(x, y, col);
//				block.id = id;
//
//				if (block.tex == -1) block.tex = wallTex;
//				if (block.floorTex == -1) block.floorTex = floorTex;
//				if (block.ceilTex == -1) block.ceilTex = ceilTex;
//				if (block.col == -1) block.col = Art.getCol(wallCol);
//				if (block.floorCol == -1) block.floorCol = Art.getCol(floorCol);
//				if (block.ceilCol == -1) block.ceilCol = Art.getCol(ceilCol);
//
//				blocks[x + y * w] = block;
//				block.level = this;
//				block.x = x;
//				block.y = y;
//			}
//		}
//
//		for (int y = 0; y < h; y++) {
//			for (int x = 0; x < w; x++) {
//				int col = pixels[x + y * w] & 0xffffff;
//				decorateBlock(x, y, blocks[x + y * w], col);
//			}
//		}
	}
	
	
	
	//constructor can be replace by init method
	public Level(int width, int height) {
		this.width = width;
		this.height = height;
		blocks = new Block[width * height];
		generateLevel();
	}

	public void tick() {
		for (int i = 0; i < entities.size(); i++) {
			Entity e = entities.get(i);
			e.tick();
			//e.updatePos();//更新位置?
			
			if (e.isRemoved()) {//未知-1
				entities.remove(i--);//似乎生成後移除
			}
		}

		for (int y = 0; y < height; y++) {//未知-2
			for (int x = 0; x < width; x++) {
				blocks[x + y * width].tick();//似乎生成後移除
			}
		}
		
	}

	public void addEntity(Entity e) {
		entities.add(e);
		e.level = this;
		/**
		 *   更新位置
		 */
		//e.updatePos();
	}

	public void generateLevel() {
		
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				Block block = null;
				if (random.nextInt(500) == 0) {
					block = new SolidBlock();
				} else {
					block = new Block();
					if (random.nextInt(25) == 0) {
						block.addSprite(new Sprite(0, 0, 0));
					}
				}
				blocks[x + y * width] = block;
				//block.level = this;//尚未了解用途
				//block.x = x;
				//block.y = y;
				
			}
		}

	}

	public Block getBlock(int x, int y) {
		if (x < 0 || y < 0 || x >= width || y >= height) {
			//System.out.println("used");
			//System.out.println("width = "+width);
			return solidWall;
		}
		//System.out.println("In Level.java 82 : "+(blocks[x + y * width]));
		return blocks[x + y * width];
	}

	public Block create(int x, int y) {
		if (x < 0 || y < 0 || x >= width || y >= height) {
			return Block.solidWall;
		}
		return blocks[x + y * width];

	}

}
